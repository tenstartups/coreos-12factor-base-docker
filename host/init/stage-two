#!/bin/bash
set -e

# This is the second stage initialization and is responsible for bringing up the
# application from scrach, which includes downloading required docker images and
# running services.  The second stage is divided into separate configs and/or
# scripts located in the init.d directory, which are executed in alphabetical
# order serially.  Note however that cloud-config yml initializers are spawned
# in parallel and cannot be guaranteed to run in order.

# Abort stage two if environment is set
if [ "${ABORT_PARASITE_INIT_STAGE_TWO}" = "true" ]; then
  echo >&2 "Aborting parasite stage two initialization per ABORT_PARASITE_INIT_STAGE_TWO environment variable"
  exit 1
fi

# Create the default bridge network and extract the bridge network address
DOCKER_VERSION=$(docker version --format '{{.Server.Version}}')
if [[ ${DOCKER_VERSION} =~ ^1\s*\.[0-9]\.[0-9]+\s*$ ]]; then
  DOCKER_BRIDGE_NETWORK_NAME=bridge
  DOCKER_BRIDGE_NETWORK_ADDRESS=$(ip addr show docker0 | grep "inet " | sed -Ee 's/^\s*inet\s+([.0-9]+)\/[0-9]+\s+.+$/\1/')
else
  DOCKER_BRIDGE_NETWORK_NAME=parasite
  /usr/bin/docker network rm ${DOCKER_BRIDGE_NETWORK_NAME} || true
  /usr/bin/docker network create --driver=bridge ${DOCKER_BRIDGE_NETWORK_NAME}
  DOCKER_BRIDGE_NETWORK_ADDRESS=$(docker network inspect --format "{{range .IPAM.Config}}{{.Gateway}}{{end}}" ${DOCKER_BRIDGE_NETWORK_NAME} | sed -Ee 's/()(\/[0-9]+)/\1/')
fi
cat << EOF >> "<%= getenv!(:config_directory) %>/env/systemd.env"
#
# Additional docker network configuration variables
DOCKER_VERSION=${DOCKER_VERSION}
DOCKER_BRIDGE_NETWORK_NAME=${DOCKER_BRIDGE_NETWORK_NAME}
DOCKER_BRIDGE_NETWORK_ADDRESS=${DOCKER_BRIDGE_NETWORK_ADDRESS}
EOF
cat << EOF >> "<%= getenv!(:config_directory) %>/env/profile.sh"
#
# Additional docker network configuration variables
export DOCKER_VERSION=${DOCKER_VERSION}
export DOCKER_BRIDGE_NETWORK_NAME=${DOCKER_BRIDGE_NETWORK_NAME}
export DOCKER_BRIDGE_NETWORK_ADDRESS=${DOCKER_BRIDGE_NETWORK_ADDRESS}
EOF
export DOCKER_VERSION=${DOCKER_VERSION}
export DOCKER_BRIDGE_NETWORK_NAME=${DOCKER_BRIDGE_NETWORK_NAME}
export DOCKER_BRIDGE_NETWORK_ADDRESS=${DOCKER_BRIDGE_NETWORK_ADDRESS}

# Attempts to start a systemd unit if it exists
start_unit() {
  systemd_unit=$1
  # Return silently if the unit doesn't exist
  systemctl status ${systemd_unit} | grep "Loaded: not-found" 2>&1 >/dev/null && return
  systemctl start ${systemd_unit}
}

# Pre-pull all docker images at the start to ensure a smoother initialization
echo "Pre-pulling all required docker images"
start_unit docker-check-image-update.service
echo "Finished pre-pulling all required docker images"

# Notify that we started
/opt/bin/send-notification warn "Starting \`docker-parasite\` initialization"

# Delete the existing parasite configuration unless explicitly prevented
[ "${KEEP_EXISTING_PARASITE_CONFIG}" == "true" ] || \
  /usr/bin/docker run --rm \
    -v ${DOCKER_VOLUME_PARASITE_CONFIG}:<%= getenv!(:config_directory) %> \
    ${DOCKER_IMAGE_SHELL} \
    sh -c "cd <%= getenv!(:config_directory) %> && rm -rf *"

# Create the parasite configuration volume if not alreay created
[ "${KEEP_EXISTING_PARASITE_CONFIG}" == "true" ] || \
  /usr/bin/docker run --rm \
    -v ${DOCKER_VOLUME_PARASITE_CONFIG}:<%= getenv!(:config_directory) %> \
    --env-file=<%= getenv!(:config_environment_file) %> \
    ${DOCKER_IMAGE_PARASITE_CONFIG} \
    container

# Load data from a backup tar file if present
/opt/bin/data-restore || true

# Start base systemd services and wait
start_unit install-tools.service &
[ -z "${ETCD_ENV_FILE}" ] || start_unit etcdd.service &
[ -z "${JOURNAL_COLLECTOR_FORMAT}" ] || start_unit journal-collector.service &
[ -z "${LOGSTASH_CONFIG_FILE}" ] || start_unit logstash-agent.service &
[ -z "${NEWRELIC_LICENSE_KEY}" ] || start_unit newrelic-agent.service &
[ -z "${SWAP_FILE}" ] || [ -z "${SWAP_SIZE_MB}" ] || start_unit swapfile.service &
wait

# Execute each initialization cloud-config or script in alphabetical order
find "<%= getenv!(:config_directory) %>/init.d" -type f | sort | uniq | while read file; do
  <% if coreos? %>___ERB_REMOVE_LINE___
  if [[ "$file" == *.yml ]]; then
    echo "Executing parasite initialization cloud-config $file..."
    coreos-cloudinit --from-file="$file"
  fi
  <% end %>___ERB_REMOVE_LINE___
  if [[ "$file" == *.sh ]]; then
    echo "Executing parasite initialization script $file..."
    "$file"
  fi
done

# Start services listed in the systemd start file
if [ -f "<%= getenv!(:config_directory) %>/systemd/start" ]; then
  cat "<%= getenv!(:config_directory) %>/systemd/start" | sort | while read unit; do
    start_unit ${unit} &
  done
  wait
fi

# Notify that we finished
/opt/bin/send-notification success "Finished \`docker-parasite\` initialization"

exit 0
